# typed: false
# frozen_string_literal: true

# This file was generated by GoReleaser. DO NOT EDIT.
class TrailDigger < Formula
  desc "trail-digger is a tool for digging trail log files of AWS CloudTrail."
  homepage "https://github.com/dotnetmentor/trail-digger"
  version "0.4.0"
  license "MIT"

  on_macos do
    if Hardware::CPU.arm?
      url "https://github.com/dotnetmentor/trail-digger/releases/download/v0.4.0/trail-digger_v0.4.0_darwin_arm64.zip"
      sha256 "558a379f39f1a770bb5a988403e623ea4c05c909e99979138bf4c97c2cf481a0"

      def install
        bin.install 'trail-digger'
        output = Utils.safe_popen_read("#{bin}/trail-digger", 'completion', 'bash')
        (bash_completion/'trail-digger').write output
        output = Utils.safe_popen_read("#{bin}/trail-digger", 'completion', 'zsh')
        (zsh_completion/'_trail-digger').write output
      end
    end
    if Hardware::CPU.intel?
      url "https://github.com/dotnetmentor/trail-digger/releases/download/v0.4.0/trail-digger_v0.4.0_darwin_amd64.zip"
      sha256 "a3aa67d9433512aa15990e17aada41d9cac791ac1cf75f5960e9e98aab8730f6"

      def install
        bin.install 'trail-digger'
        output = Utils.safe_popen_read("#{bin}/trail-digger", 'completion', 'bash')
        (bash_completion/'trail-digger').write output
        output = Utils.safe_popen_read("#{bin}/trail-digger", 'completion', 'zsh')
        (zsh_completion/'_trail-digger').write output
      end
    end
  end

  on_linux do
    if Hardware::CPU.intel?
      url "https://github.com/dotnetmentor/trail-digger/releases/download/v0.4.0/trail-digger_v0.4.0_linux_amd64.tar.gz"
      sha256 "eb25be8ebab91ab81df4daa2fe6b9ae4abad4360bfaee5903c92c4132fc6261f"

      def install
        bin.install 'trail-digger'
        output = Utils.safe_popen_read("#{bin}/trail-digger", 'completion', 'bash')
        (bash_completion/'trail-digger').write output
        output = Utils.safe_popen_read("#{bin}/trail-digger", 'completion', 'zsh')
        (zsh_completion/'_trail-digger').write output
      end
    end
  end
end
