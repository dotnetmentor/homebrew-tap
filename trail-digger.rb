# typed: false
# frozen_string_literal: true

# This file was generated by GoReleaser. DO NOT EDIT.
class TrailDigger < Formula
  desc "trail-digger is a tool for digging trail log files of AWS CloudTrail."
  homepage "https://github.com/dotnetmentor/trail-digger"
  version "0.3.0"
  license "MIT"

  on_macos do
    if Hardware::CPU.arm?
      url "https://github.com/dotnetmentor/trail-digger/releases/download/v0.3.0/trail-digger_v0.3.0_darwin_arm64.zip"
      sha256 "3e81918059ae8e5c06104367350d58cff4b62f4e7276670c99515b9c7a4c4c50"

      def install
        bin.install 'trail-digger'
        output = Utils.safe_popen_read("#{bin}/trail-digger", 'completion', 'bash')
        (bash_completion/'trail-digger').write output
        output = Utils.safe_popen_read("#{bin}/trail-digger", 'completion', 'zsh')
        (zsh_completion/'_trail-digger').write output
      end
    end
    if Hardware::CPU.intel?
      url "https://github.com/dotnetmentor/trail-digger/releases/download/v0.3.0/trail-digger_v0.3.0_darwin_amd64.zip"
      sha256 "0538458bca134b8e4ada8c379d9e931b7aeec8dc59198b8a41ff067da5fde2b0"

      def install
        bin.install 'trail-digger'
        output = Utils.safe_popen_read("#{bin}/trail-digger", 'completion', 'bash')
        (bash_completion/'trail-digger').write output
        output = Utils.safe_popen_read("#{bin}/trail-digger", 'completion', 'zsh')
        (zsh_completion/'_trail-digger').write output
      end
    end
  end

  on_linux do
    if Hardware::CPU.intel?
      url "https://github.com/dotnetmentor/trail-digger/releases/download/v0.3.0/trail-digger_v0.3.0_linux_amd64.tar.gz"
      sha256 "734637c9e0fc14918a236d721a4116e84ba4605e791ad7a1d7975738267b23a2"

      def install
        bin.install 'trail-digger'
        output = Utils.safe_popen_read("#{bin}/trail-digger", 'completion', 'bash')
        (bash_completion/'trail-digger').write output
        output = Utils.safe_popen_read("#{bin}/trail-digger", 'completion', 'zsh')
        (zsh_completion/'_trail-digger').write output
      end
    end
  end
end
